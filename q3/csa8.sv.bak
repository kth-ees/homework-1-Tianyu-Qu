// ================================================
// 8-bit Carry Select Adder using 4-bit adders (fixed)
// ================================================
module CSA_8 (
    input  logic [7:0] A,
    input  logic [7:0] B,
    output logic [7:0] sum,
    output logic       carry
);
    // -------- low 4 bits --------
    logic [3:0] sum_lo;
    logic       c4;
    adder_4 add_lo (.A(A[3:0]), .B(B[3:0]), .sum(sum_lo), .carry(c4));

    // -------- high 4 bits base: A[7:4] + B[7:4] --------
    logic [3:0] s_hi0;
    logic       c8_0;
    adder_4 add_hi_base (.A(A[7:4]), .B(B[7:4]), .sum(s_hi0), .carry(c8_0));

    // -------- high 4 bits with cin=1: (A[7:4]+B[7:4]) + 1 --------
    logic [3:0] s_hi1;
    logic       carry_inc;
    adder_4 add_inc (.A(s_hi0), .B(4'b0001), .sum(s_hi1), .carry(carry_inc));

    logic c8_1;
    assign c8_1 = c8_0 | carry_inc;    // (A+B+1) 

    // -------- select by c4 --------
    always_comb begin
        sum[3:0] = sum_lo;
        {carry, sum[7:4]} = (c4) ? {c8_1, s_hi1}
                                 : {c8_0, s_hi0};
    end
endmodule

// {carry,sum} = A + B
module adder_4 (
    input  logic [3:0] A,
    input  logic [3:0] B,
    output logic [3:0] sum,
    output logic       carry
);
    assign {carry, sum} = A + B;
endmodule

